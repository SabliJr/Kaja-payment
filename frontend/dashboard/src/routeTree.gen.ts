/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TransactionsImport } from './routes/transactions'
import { Route as SettingsImport } from './routes/settings'
import { Route as ProductsImport } from './routes/products'
import { Route as FundsImport } from './routes/funds'
import { Route as ApiImport } from './routes/api'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TransactionsRoute = TransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ProductsRoute = ProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const FundsRoute = FundsImport.update({
  id: '/funds',
  path: '/funds',
  getParentRoute: () => rootRoute,
} as any)

const ApiRoute = ApiImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiImport
      parentRoute: typeof rootRoute
    }
    '/funds': {
      id: '/funds'
      path: '/funds'
      fullPath: '/funds'
      preLoaderRoute: typeof FundsImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/funds': typeof FundsRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/funds': typeof FundsRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/funds': typeof FundsRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/transactions': typeof TransactionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api'
    | '/funds'
    | '/products'
    | '/settings'
    | '/transactions'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/api' | '/funds' | '/products' | '/settings' | '/transactions'
  id:
    | '__root__'
    | '/'
    | '/api'
    | '/funds'
    | '/products'
    | '/settings'
    | '/transactions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiRoute: typeof ApiRoute
  FundsRoute: typeof FundsRoute
  ProductsRoute: typeof ProductsRoute
  SettingsRoute: typeof SettingsRoute
  TransactionsRoute: typeof TransactionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiRoute: ApiRoute,
  FundsRoute: FundsRoute,
  ProductsRoute: ProductsRoute,
  SettingsRoute: SettingsRoute,
  TransactionsRoute: TransactionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/api",
        "/funds",
        "/products",
        "/settings",
        "/transactions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/api": {
      "filePath": "api.tsx"
    },
    "/funds": {
      "filePath": "funds.tsx"
    },
    "/products": {
      "filePath": "products.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
